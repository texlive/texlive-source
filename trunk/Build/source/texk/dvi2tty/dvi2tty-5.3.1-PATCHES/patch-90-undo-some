diff -ur dvi2tty-5.3.1.orig/disdvi.c dvi2tty-5.3.1/disdvi.c
--- dvi2tty-5.3.1.orig/disdvi.c	2010-10-22 09:17:28.000000000 +0200
+++ dvi2tty-5.3.1/disdvi.c	2010-10-24 14:03:20.000000000 +0200
@@ -154,7 +154,7 @@
 {
     register int opcode;                /* dvi opcode                        */
     register int i;
-    unsigned long fontnum;
+    int fontnum;
 
 #if defined(THINK_C)
     argc = process_disdvi_command_line(&argv);
@@ -229,7 +229,7 @@
             printnonprint(opcode);              /* it must be a non-printable */
         else if ((opcode >= FONT_00) && (opcode <= FONT_63)) 
             printf("FONT_%02d              /* %s */\n", opcode - FONT_00,
-                                    fontname((unsigned long) opcode - FONT_00));
+                                    fontname(opcode - FONT_00));
         else
             switch (opcode) {
                 case SET1     :
@@ -301,7 +301,7 @@
                 case FNT2     :
                 case FNT3     :
                 case FNT4     : fontnum = num(opcode -FNT1 + 1);
-                                printf("FNT%d:     %ld    /* %s */\n",
+                                printf("FNT%d:     %d    /* %s */\n",
                                        opcode - FNT1 + 1, fontnum,
                                        fontname(fontnum));
                                 break;
@@ -469,7 +469,7 @@
     char * name;
     font * fnt;
     int namelen;
-    unsigned long fntnum;
+    long fntnum;
     int new = 0;
 
     fntnum = num(x);
@@ -522,7 +522,7 @@
  * FONTNAME -- Return font name.
  */
 
-const char * fontname(unsigned long fntnum)
+const char * fontname(long fntnum)
 {
     font * fnt;
 
diff -ur dvi2tty-5.3.1.orig/dvi2tty.c dvi2tty-5.3.1/dvi2tty.c
--- dvi2tty-5.3.1.orig/dvi2tty.c	2010-10-22 14:15:38.000000000 +0200
+++ dvi2tty-5.3.1/dvi2tty.c	2010-10-24 14:28:11.424244541 +0200
@@ -180,17 +180,17 @@
                               /* don't have terminals with Scand. nat. chars */
 #define WANTPAGER   TRUE      /* default: try to pipe through a pager (like  */
                               /* more) if stdout is tty and no -o switch     */
-#define DEFPAGER    "more"    /* CHANGE TO YOUR LOCAL PAGER                  */
+#define DEFPAGER    "more"   /* CHANGE TO YOUR LOCAL PAGER            */
 
     /*------------------ end of customization constants ---------------------*/
 
 #define MAXLEN          100    /* size of char-arrays for strings            */
-#if defined(MSDOS) || defined(VMS) || defined(AMIGA)
-#define OPTSET      "haJwepPousltvbc" /* legal options                       */
-#define OPTWARG     "wepPovb"  /* options with argument                      */
+#if defined(MSDOS) || defined(VMS)
+#define OPTSET      "wepPousl"   /* legal options                            */
+#define OPTWARG     "wepPo"      /* options with argument                    */
 #else
-#define OPTSET      "haJwepPousqlfFtvbc"/* legal options                     */
-#define OPTWARG     "wepPoFvb"     /* options with argument                  */
+#define OPTSET      "wepPousqlfF"/* legal options                            */
+#define OPTWARG     "wepPoF"     /* options with argument                    */
 #endif
 
 /*
@@ -206,19 +206,12 @@
 #define bdopt  7                /* bad option                        */
 #define onepp  8                /* only one page list allowed        */
 #define noarg  9                /* argument expected                 */
-#if defined(THINK_C)
-#define nored  10               /* if no input file, redirect stdin  */
-#endif
-
 
+#if 0
+char *dvi2tty = "@(#) dvi2tty.c  4.1 27/03/90 M.J.E. Mol (c) 1989, 1990";
+#endif
 
-/*
- * Variable definitions
- */
-
-char *dvi2tty = "@(#) dvi2tty.c  5.12 27may1996 M.J.E. Mol (c) 1989-1996";
-#define VERSION 5.2
-
+/*---------------------------------------------------------------------------*/
 
 printlisttype * currentpage;    /* current page to print                     */
 printlisttype * firstpage;      /* first page selected                       */
@@ -227,14 +220,11 @@
 FILE *          DVIfile;
 FILE *          output;
 bool            outputtofile;   /* tells if output goes to file or stdout    */
-#if defined(THINK_C)
-bool            inputfromfile;  /* tells if input comes from file or stdin   */
-#endif
 int             ttywidth;       /* max nr of chars per printed line          */
 int             espace;         /* to fake calcs with ttywidth               */
 
 long            foo;            /* utility variable, "register"              */
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C) && !defined(AMIGA)
+#if !defined(MSDOS) && !defined(VMS)
 bool            pager;          /* tells if output is piped to a pager       */
 const char  *   path;           /* name of the pager to run                  */
 #endif
@@ -245,94 +235,67 @@
 const char *    OUTfilename;
 char            optch;          /* for option handling                       */
 
+/*---------------------------------------------------------------------------*/
 
-
-/* 
- * Function declarations
- */
-
-#if defined(MSDOS)
-void    setoption (const char *);
-void    getargs   (void);
-void    getpages  (int, const char *);
-void    plcnxt    (int);
-void    getfname  (const char *);
-int     getinteger(int *, int *, const char *);
-int     getlong   (long *, int *, const char *);
-void    usage     (int);
+#if defined(KPATHSEA) || defined(MSDOS)
+int     main       (int, char **); 
+void    setoption  (const char *);
+void    getargs    (void);
+void    getpages   (int, const char *);
+void    plcnxt     (int);
+void    getfname   (const char *);
+int     getinteger (int *, int *, const char *);
+void    usage      (int);
 #else
+char *  getenv    ();
+FILE *  popen     ();
 
-# if defined(VMS)
-        main      (int argc, char ** argv); 
-# endif
-void    setoption (const char * optarg);
-void    getargs   (void);
-void    getpages  (int j, const char * str);
-void    plcnxt    (int pagnr);
-void    getfname  (const char * str);
-int     getinteger(int * dest, int * j, const char * str);
-int     getlong   (long * dest, int * j, const char * str);
-void    usage     (int uerr);
+int     main      (); 
+void    setoption ();
+void    getargs   ();
+void    getpages  ();
+void    plcnxt    ();
+void    getfname   ();
+int     getinteger();
+void    usage     ();
 #endif
 
-
 /****************************************************************************/
 /*                                                                          */
 /*                                 M A I N                                  */
 /*                                                                          */
 /****************************************************************************/
 
-#if defined(VMS)
-main(int argc, char **argv)
-#else
 int main(int argc, char **argv)
-#endif
 {
 
-#if defined(THINK_C)
-    argc = process_dvi_command_line(&argv);
-#endif
-
     progname = *argv;
     Argc = argc;
     Argv = argv;
 
     getargs();                              /* read command line arguments   */
-#if defined(THINK_C)
-    if (inputfromfile) {
-#endif
-#if defined(MSDOS) || defined(WIN32)
-        if ((DVIfile = fopen(DVIfilename, "rb")) == NULL)
+#if defined(DOSISH)
+    if ((DVIfile = fopen(DVIfilename, "rb")) == NULL)
 #else
-# if defined(VMS)
-        if ((DVIfile = fopen(DVIfilename, "r","ctx=rec")) == NULL)
-# else
-        if ((DVIfile = fopen(DVIfilename, "r")) == NULL)
-# endif
+#if defined(VMS)
+    if ((DVIfile = fopen(DVIfilename, "r","ctx=rec")) == NULL)
+#else
+    if ((DVIfile = fopen(DVIfilename, "r")) == NULL)
 #endif
-            errorexit(filop);               /* can't open dvifile            */
-#if defined(THINK_C)
-    }
-    else
-        DVIfile = stdin;
 #endif
+        errorexit(filop);                   /* can't open dvifile            */
 
     if (outputtofile) {                     /* open the outfile, if needed   */
         if ((output = fopen(OUTfilename, "w")) == NULL)
             errorexit(filcr);
-#if defined(THINK_C)
-        else
-            set_creator((unsigned char*) OUTfilename);
-#endif
-
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C)
+#if !defined(MSDOS) && !defined(VMS)
         pager = FALSE;
 #endif
     }
     else {
         output = stdout;
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C)
-        if (pager && isatty(fileno(output))) {   /* try to pipe to a pager   */
+#if !defined(MSDOS) && !defined(VMS)
+        if (isatty(fileno(output)) && pager) {   /* try to pipe to a pager   */
             if ((output = popen(path, "w")) == NULL) /* get pipe to pager    */
                 errorexit(pipcr);                /* make output to output    */
         }
@@ -343,20 +306,79 @@
 
     dvimain();
 
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C)
+#if !defined(MSDOS) && !defined(VMS)
     if (pager)
         pclose(output);                     /* close pipe to pager            */
 #endif
 
-    exit(0);
+    return 0;
 
 } /* main */
 
+/*----------------------------------------------------------------------------*/
 
+void setoption(const char *optarg)
+{
+    int j = 0;
+   
+    while (strchr(OPTSET, optch) != NULL) {
+        switch (optch) {
+#if !defined(MSDOS) && !defined(VMS)
+	    case 'q' : pager = FALSE; break;
+	    case 'f' : pager = TRUE; break;
+#endif
+	    case 'l' : noffd = TRUE; break;
+	    case 's' : scascii = TRUE; break;
+	    case 'u' : scascii = FALSE; break;
+            case 'P' :
+		       sequenceon = TRUE;     /* fall through */
+            case 'p' :
+                       if (pageswitchon)
+                           usage(onepp);
+                       getpages(j, optarg);
+                       break;
+            case 'w' :
+		       if (getinteger(&ttywidth, &j, optarg))
+                           usage(nan);
+                       if (optarg[j] != '\0') 
+                           usage(gae);
+                       if ((ttywidth < 16) || (ttywidth > 132))
+                           usage(wrnge);
+                       break;
+            case 'e' :
+		       if (getinteger(&espace, &j, optarg))
+                           usage(nan);
+                       if (optarg[j] != '\0') 
+                           usage(gae);
+                       break;
+            case 'o' :
+                       OUTfilename = optarg;
+		       outputtofile = TRUE;
+                       j = strlen(optarg);
+                       break;
+#if !defined(MSDOS) && !defined(VMS)
+            case 'F' :
+                       pager = TRUE;
+                       path = optarg;
+                       j = strlen(optarg);
+                       break;
+#endif
+            default  : 
+                       usage(bdopt);
+        }
+        if ((optch = optarg[j]) == '\0')
+            break;
+        j++;
+        if ((strchr(OPTWARG, optch) != NULL) && (optarg[j]=='\0')) {
+                if (--Argc <= 0)
+                    usage(noarg);
+                optarg = *++Argv;
+                j = 0;
+            }
+    }
+} /* setoption */
 
-/*
- * GETARGS -- Process options from command line and from environment.
- */
+/*----------------------------------------------------------------------------*/
 
 void getargs(void)
 {
@@ -364,67 +386,33 @@
     char *envp;
     bool DVIfound;                      /* if a dvi filename found           */
 
-#if !defined(THINK_C)
     if (Argc <= 1)
         usage(ign);
-#endif
 
     pageswitchon = FALSE;       /* show all pages                            */
     sequenceon   = FALSE;       /* selected pages are TeX-numbered           */
     outputtofile = FALSE;       /* write to stdout                           */
-#if defined(THINK_C)
-    inputfromfile = FALSE;      /* read from stdin                           */
-#endif
-#if !defined(MSDOS) && !defined(VMS) && !defined (THINK_C) && !defined(AMIGA)
+#if !defined(MSDOS) && !defined(VMS)
     pager        = WANTPAGER;   /* want paging, compile time option          */
 #endif
-    accent       = TRUE;        /* show all accent etc. as extra char        */
-    ttfont       = FALSE;	/* assume tt font (verbatim mode)            */
     noffd        = FALSE;       /* print formfeed between pages              */
     scascii      = DEFSCAND;    /* scandinavian, compile time option         */
     ttywidth     = 80;          /* default terminal width                    */
     espace       = 0;           /* to fake ttywith calcs                     */
     DVIfound     = FALSE;
-    printfont    = FALSE;       /* do not print font switches                */
-    allchar      = FALSE;       /* do not put out all characters             */
 
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C) && !defined(AMIGA)
+#if !defined(MSDOS) && !defined(VMS)
     if ((path = getenv("PAGER")) == NULL)   /* find default pathname of page */
             path = DEFPAGER;             /* program in case paging is wanted */
 #endif
 
-    /*
-     *
-     * With VAX-C under VMS getenv normally searches the environment array
-     * looking for the variables HOME, TERM, PATH, and USER.  In certain
-     * situations getenv attempts to first perform a logical name translation
-     * if none of the environment array strings are matched and then trying
-     * to translate a CLI symbol.  Unfortunately we need a CLI symbol defined
-     * as;
-     *
-     *     dvi2tty :== $path:dvi2tty.exe
-     *
-     * to invoke dvi2tty with command line arguments as it would be invoked
-     * under Unix.  So we use the logical DVI$DVI2TYY as the environment
-     * variable from which options may be set.
-     *
-     */
-
-    /*
-     * First process environment variable.
-     */
-
-#if defined(VMS)
-    if ((envp = getenv("DVI$DVI2TTY")) != NULL) {
-#else
-    if ((envp = getenv("DVI2TTY")) != NULL) { /* } keep vi happy */
-#endif
+    if ((envp = getenv("DVI2TTY")) != NULL) {
         while (*envp == ' ')
              envp++;
         while (*envp) {                     /* environment var args          */
             if (strchr(OPTSET, optch = *envp++) != NULL) {
                 /*
-                 * we always pass one option, and arrange for optarg ourselfes,
+                 * we always pass one option, and arrange for optarg ourselfves,
                  * so setoption does not mesh up Argv
                  */
                 if (strchr(OPTWARG, optch) != NULL) {
@@ -449,19 +437,12 @@
         }
     }
 
-    /*
-     * Now process command line options.
-     */
-
     while (--Argc > 0) {                    /* command line args             */
         str = *++Argv;
         if (*str != '-') {                  /* argument is not an option     */
             if (DVIfound)                   /* only one dvi file allowed     */
                 usage(onef);
             getfname(str);
-#if defined(THINK_C)
-            inputfromfile =
-#endif
             DVIfound = TRUE;
         }
         else if (strchr(OPTSET, optch = *++str) != NULL) {
@@ -478,99 +459,11 @@
     }
 
     if (!DVIfound)
-#if defined(THINK_C)                             /* Allow use of stdin for   */
-        if (isatty(fileno(stdin)))
-            usage(nored);                        /*   Mac, if redirected     */
-#else
         usage(ign);
-#endif
-
-    return;
 
 } /* getargs */
 
-
-
-/*
- * SETOPTION -- Process an option.
- */
-
-void setoption(const char *optarg)
-{
-    int j = 0;
-   
-    while (strchr(OPTSET, optch) != NULL) {
-        switch (optch) {
-	    case 'h' : usage(ign); break;
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C) && !defined(AMIGA)
-	    case 'q' : pager = FALSE; break;
-	    case 'f' : pager = TRUE; break;
-            case 'F' : pager = TRUE;
-                       path = optarg;
-                       j = strlen(optarg);
-                       break;
-#endif
-            case 'J' : japan   = TRUE; break;
-            case 't' : ttfont  = TRUE; break;
-	    case 'l' : noffd   = TRUE; break;
-	    case 's' : scascii = TRUE; break;
-	    case 'u' : scascii = FALSE; break;
-	    case 'a' : accent  = FALSE; break;
-	    case 'c' : allchar = TRUE; break;
-            case 'P' : sequenceon = TRUE;     /* fall through */
-            case 'p' : if (pageswitchon)
-                           usage(onepp);
-                       getpages(j, optarg);
-                       break;
-            case 'w' : if (getinteger(&ttywidth, &j, optarg))
-                           usage(nan);
-                       if (optarg[j] != '\0') 
-                           usage(gae);
-                       if ((ttywidth < 16) || (ttywidth > MAXTERMWIDTH))
-                           usage(wrnge);
-                       break;
-            case 'e' : if (getinteger(&espace, &j, optarg))
-                           usage(nan);
-                       if (optarg[j] != '\0') 
-                           usage(gae);
-                       break;
-            case 'v' : if (getlong(&lineheight, &j, optarg))
-                           usage(nan);
-                       if (optarg[j] != '\0') 
-                           usage(gae);
-                       /* lineheight *= 65536L; */
-                          /* want to specify in pt, but have no getfloat */
-                       break;
-            case 'o' : OUTfilename = optarg;
-		       outputtofile = TRUE;
-                       j = strlen(optarg);
-                       break;
-            case 'b' : printfont = TRUE;
-                       delim = optarg;
-                       if (!strlen(optarg))
-                           printfont = FALSE;
-                       break;
-            default  : usage(bdopt);
-        }
-        if ((optch = optarg[j++]) == '\0')
-            break;
-        if ( (optarg[j] == '\0') && (strchr(OPTWARG, optch) != NULL) ) {
-                if (--Argc <= 0)
-                    usage(noarg);
-                optarg = *++Argv;
-                j = 0;
-            }
-    }
-
-    return;
-
-} /* setoption */
-
-
-
-/* 
- * GETPAGES -- Getr a list of pages to print.
- */
+/*---------------------------------------------------------------------------*/
 
 void getpages(int j, const char *str)
 {
@@ -623,19 +516,11 @@
     }
     currentpage = firstpage;
 
-    return;
-
 } /* getpages */
 
 
-
-/*
- * PLCNXT -- Place page-nr next in list.
- */
-
-void plcnxt(int pagnr)
+void plcnxt(int pagnr)      /* place page-nr next in list */
 {
-
     currentpage = lastpage;
     currentpage->pag = pagnr;
     lastpage = (printlisttype *) malloc(sizeof(printlisttype));
@@ -644,10 +529,9 @@
     lastpage->pag = 0;
     currentpage->nxt = lastpage;
 
-    return;
-
 } /* plcnxt */
 
+/*----------------------------------------------------------------------------*/
 
 #ifdef KPATHSEA
 #ifdef __DJGPP__
@@ -675,13 +559,13 @@
       ret = NULL;
   }
   else {
-    ret = name;
+    ret = (string) name;
   }
 #else /* ! WIN32 */
   struct stat st;
   
   if (READABLE (name, st)) {
-    ret = name;
+    ret = (string) name;
 
   } else { /* Some other error.  */
     ret = NULL;
@@ -692,10 +576,6 @@
 }
 #endif
 
-/*
- * GETFNAME -- {Make sure we have a .dvi filename.
- */
-
 void getfname(const char *str)
 {
     int   i;
@@ -705,23 +585,21 @@
         usage(ign);
     strcpy(DVIfilename, str);
 #ifdef KPATHSEA
-    if (!readable_file(DVIfilename))
+    if (readable_file(DVIfilename))
+      return;
+
+    strcat(DVIfilename, ".dvi");
+
 #else
-    if ((i < 5) || strcmp(str+i-4, ".dvi"))
-#endif
+    if (!((i >= 5) && (str[i-1] == 'i') && (str[i-2] == 'v') &&
+          (str[i-3] == 'd') && (str[i-4] == '.'))) {
         strcat(DVIfilename, ".dvi");
-
-    return;
+    }
+#endif
 
 } /* getfname */
 
-
-
-
-/*
- * GETINTEGER -- Convert ascii to an integer. I'm sure there is a library
- *               call for it.
- */
+/*----------------------------------------------------------------------------*/
 
 int getinteger(int *dest, int *j, const char *str)
 {
@@ -736,7 +614,6 @@
     }
     else
         sgn = 1;
-
     if ((ch >= '0') && (ch <= '9')) {
         cum = 0;
         while ((ch >= '0') && (ch <= '9')) {
@@ -744,55 +621,13 @@
             ch = str[++(*j)];
         }
         *dest = sgn * cum;
-
         return 0;                   /* return ok */
     }
-
     return 1;                       /* return error */
 
 }   /* getinteger */
 
-
-
-/*
- * GETLONG -- Convert ascii to a long. I'm sure there is a library
- *            call for it.
- */
-
-int getlong(long *dest, int *j, const char *str)
-{
-    long  cum;
-    int  sgn;
-    char ch;
-
-    ch = str[*j];
-    if (ch == '-') {
-        sgn = -1;
-        ch  = str[++(*j)];
-    }
-    else
-        sgn = 1;
-
-    if ((ch >= '0') && (ch <= '9')) {
-        cum = 0;
-        while ((ch >= '0') && (ch <= '9')) {
-            cum = cum*10L + ch - '0';
-            ch = str[++(*j)];
-        }
-        *dest = (long) sgn * cum;
-
-        return 0;                   /* return ok */
-    }
-
-    return 1;                       /* return error */
-
-}   /* getinteger */
-
-
-
-/*
- * ERROREXIT -- Exit program with an erro message.
- */
+/*----------------------------------------------------------------------------*/
 
 void errorexit(int errorcode)
 {
@@ -839,7 +674,7 @@
                       break;
         case  filcr : fprintf(stderr, "Cannot create outfile\n");
                       break;
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C) && !defined(AMIGA)
+#if !defined(MSDOS) && !defined(VMS)
         case  pipcr : fprintf(stderr, "Cannot create pipe to pager\n");
                       break;
 #endif
@@ -852,31 +687,23 @@
 #else
         unlink(OUTfilename);
 #endif
-
     exit(errorcode);
 
 }  /* errorexit */
 
-
-
-/*
- * USAGE -- Print the usage info. Also print a warning/error message
- *          if needed.
- */
+/*----------------------------------------------------------------------------*/
 
 void usage(int uerr)
 {
 
-    fprintf(stderr, "%s", Copyright);
-
     if (uerr != ign) {
         fprintf(stderr,"%s: ", progname);
         switch (uerr) {
-            case   wrnge  : fprintf(stderr, "width arg out of range:16-%d",
-                                            MAXTERMWIDTH);
+            case   ign    : fprintf(stderr, "%s", Copyright);
+                            break;
+            case   wrnge  : fprintf(stderr, "width arg out of range:16-132");
                             break;
-            case   nan    : fprintf(stderr,
-                                    "numeric argument expected for option %c",
+            case   nan    : fprintf(stderr, "numeric argument expected for option %c",
                                             optch);
                             break;
             case   gae    : fprintf(stderr, "garbage in argument for option %c",
@@ -886,47 +713,29 @@
                             break;
             case   onef   : fprintf(stderr, "only one infile argument allowed");
                             break;
-            case   noarg  : fprintf(stderr,
-                                    "option argument expected for option %c",
+            case   noarg  : fprintf(stderr, "option argument expected for option %c",
                                             optch);
                             break;
             case   bdopt  : fprintf(stderr, "bad option %c", optch);
                             break;
             case   onepp  : fprintf(stderr, "only one pagelist allowed");
                             break;
-#if defined(THINK_C)
-            case   nored  : fprintf(stderr, "\nIf no input file is given in\
- command string,\n\Standard Input must be redirected with the radio button.");
-                            break;
-#endif
             default       : fprintf(stderr, "unknown usage error");
                             break;
         }
         fprintf(stderr, "\n");
     }
-
-    fprintf(stderr, "\n%s\n\n", dvi2tty);
-#if defined(THINK_C)
-    fprintf(stderr, "Usage: %s [ options ] [<dvi-file>[.dvi]]\n", progname);
-    fprintf(stderr, "Read input from <dvi-file>, else read from Standard Input,\
-\nwhich must be redirected by means of the radio button.\n");
-#else
-    fprintf(stderr, "Usage: %s [ options ] <dvi-file>[.dvi]\n", progname);
-#endif
+    fprintf(stderr, "Usage: %s [ options ] dvifile[.dvi]\n", progname);
     fprintf(stderr, "Options are:\n");
     fprintf(stderr,
             " -ofile   Write output to file, else write to stdout.\n");
     fprintf(stderr,
-            " -plist   Print pages whose TeX-page-number are in list.\n");
+            " -plist   Print pages whos TeX-page-number are in list.\n");
     fprintf(stderr,
-            " -Plist   Print pages whose sequential number are in list.\n");
+            " -Plist   Print pages whos sequential number are in list.\n");
     fprintf(stderr,
             " -wn      Print the lines with width n characters, default 80.\n");
-    fprintf(stderr,
-            " -vn      Use n for vertical line height, default 450000.\n");
-    fprintf(stderr,
-            " -evalue  Add/Substract this value for spacing (-20..20)\n");
-#if !defined(MSDOS) && !defined(VMS) && !defined(THINK_C) && !defined(AMIGA)
+#if !defined(MSDOS) && !defined(VMS)
     fprintf(stderr, " -f       Try to pipe to a pager if output is a tty");
     if (WANTPAGER)
         fprintf(stderr, " (default).\n");
@@ -940,23 +749,19 @@
     fprintf(stderr, " -Fprog   Pipe output to pager prog.\n");
 #endif
     fprintf(stderr,
-            " -a       Remove accents grave etc. from output: \\'{e} -> e.\n");
-    fprintf(stderr,
-            " -t       Assuming that document was made with tt fonts\n");
-    fprintf(stderr,
             " -l       Write ''^L'' instead of formfeed between pages.\n");
     fprintf(stderr,
-            " -u       National Swedish/Finnish characters printed as aaoAAO (default %s).\n", DEFSCAND ? "off" : "on");
-    fprintf(stderr,
-            " -s       National Swedish/Finnish characters printed as }{|][\\ (default %s).\n", DEFSCAND ? "on" : "off");
-    fprintf(stderr,
-            " -J       Allow processing of japanese fonts\n");
-    fprintf(stderr,
-            " -c       Override -a -u -s and print all characters 0-255.\n");
+            " -u       National Swedish/Finnish characters printed as aaoAAO");
+    if (DEFSCAND)
+        fprintf(stderr, ".\n");
+    else
+        fprintf(stderr, " (default).\n");
     fprintf(stderr,
-            " -bdelim  Print font switch as text: delimcmr10miled\n");
-    fprintf(stderr, " -h       This help message.\n");
-
+            " -s       National Swedish/Finnish characters printed as }{|][\\");
+    if (DEFSCAND)
+        fprintf(stderr, " (default).\n");
+    else
+        fprintf(stderr, ".\n");
     exit(uerr);
 
 } /* usage */
diff -ur dvi2tty-5.3.1.orig/dvi2tty.h dvi2tty-5.3.1/dvi2tty.h
--- dvi2tty-5.3.1.orig/dvi2tty.h	2010-10-22 15:08:40.000000000 +0200
+++ dvi2tty-5.3.1/dvi2tty.h	2010-10-24 14:29:23.814830452 +0200
@@ -23,33 +23,28 @@
 
 #include <stdio.h>
 #include <string.h>
-#include <stdlib.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+
 #if defined(MSDOS)
-# include <malloc.h>
-#else
-# if !defined(THINK_C)
-#  include <unistd.h>
-# endif
+#define DOSISH
+#include <stdlib.h>
+#include <malloc.h>
 #endif
 
 #if defined(KPATHSEA)
 #define NO_DEBUG 1
 #include <kpathsea/config.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-#else
+#endif
+
+#ifndef KPATHSEA
 #define TRUE        1
 #define FALSE       0
 #endif
 #define nil         NULL
 
 /*
- * Define the maximum width of the terminal
- * (this is also used to define the with of the line structure in dvistuff.c)
- */
-#define MAXTERMWIDTH	332
-
-/*
  * ERROR CODES , don't start with 0
  */
 
@@ -76,11 +71,7 @@
 #define pipcr   20              /* cannot creat pipe                 */
 #endif
 
-
-
-/*
- * Type definitions
- */
+/*---------------------------------------------------------------------------*/
 
 typedef char bool;
 
@@ -91,22 +82,13 @@
     struct prlistptr *nxt;              /* next item in list                 */
 } printlisttype;
 
-
-
-/*
- * Variable definitions
- */
+/*---------------------------------------------------------------------------*/
 
 extern bool   outputtofile;            /* output to file or stdout(dvi2tty.c)*/
 extern bool   pageswitchon;            /* user-set pages to print(dvistuff.c)*/
 extern bool   sequenceon;              /* not TeX pagenrs (dvistuff.c)       */
 extern bool   scascii;                 /* Scand. nat. chars (dvistuff.c)     */
-extern bool   accent;                  /* Output accent stuff(dvistuff.c)    */
-extern bool   ttfont;                  /* tt font assumed   (dvistuff.c)     */
-extern bool   japan;                   /* japanes font support (dvistuff.c)  */
 extern bool   noffd;                   /* output ^L or formfeed (dvistuff.c) */
-extern bool   printfont;               /* include font switches (dvistuff.c) */
-extern bool   allchar;                 /* output all characters (dvistuff.c  */
 
 extern printlisttype *currentpage;     /* current page to print (dvi2tty.c)  */
 extern printlisttype *firstpage;       /* first page selected (dvi2tty.c)    */
@@ -115,29 +97,15 @@
 extern int            ttywidth;        /* screen width (dvi2tty.c)           */
 extern int            espace;          /* extra screen width (dvi2tty.c)     */
 extern long           foo;             /* temporary 'register' (dvi2tty.c)   */
-extern long           lineheight;      /* height of a line (dvistuff.c)      */
 extern int            opcode;          /* dvi opcode (dvistuff.c)            */
-extern char *         delim;           /* printer font delim (dvistuff.c)    */
 
 extern FILE *DVIfile;                  /* dvi file (dvi2tty.c)               */
 extern FILE *output;                   /* output file (dvi2tty.c)            */
 
-
-
-/*
- * Funtion declarations
- */
+/*---------------------------------------------------------------------------*/
 
 /* dvi2tty.c */
-#if defined(MSDOS)
 void errorexit(int);
-#else
-void errorexit(int errorcode);
-#endif
 
 /* dvistuff.c */
-#if defined(MSDOS)
-void dvimain(void);
-#else
 void dvimain(void);
-#endif
diff -ur dvi2tty-5.3.1.orig/dvistuff.c dvi2tty-5.3.1/dvistuff.c
--- dvi2tty-5.3.1.orig/dvistuff.c	2010-10-23 19:03:03.000000000 +0200
+++ dvi2tty-5.3.1/dvistuff.c	2010-10-24 15:01:30.719544412 +0200
@@ -23,23 +23,15 @@
  */
 
 #include "dvi2tty.h"
-
+#include <sys/types.h>
+#include <sys/stat.h>
 #if defined(VMS) 
-# include types.h
-# include stat
-#else
-# if defined(THINK_C)
-#  include <unix.h>
-# else
-#  include <sys/types.h>
-#  include <sys/stat.h>
-# endif
+#include types.h
+#include stat
 #endif
-
-#if defined(MSDOS) || defined(THINK_C)
-# include <math.h>
+#if defined(MSDOS)
+#include <math.h>
 #endif
-
 #include "commands.h"
 
 
@@ -58,10 +50,9 @@
 #define VERSIONID            2 /* dvi version number that pgm handles      */
 #define VERTICALEPSILON 450000L /* crlf when increasing v more than this   */
 
-#define rightmargin     MAXTERMWIDTH+20 
-                               /* nr of columns allowed to the right of h=0*/
+#define rightmargin     152    /* nr of columns allowed to the right of h=0*/
 #define leftmargin      -50    /* give some room for negative h-coordinate */
-#define LINELEN         rightmargin - leftmargin + 1 
+#define LINELEN         203    /* rightmargin - leftmargin + 1 */
 
 #define MOVE            TRUE   /* if advancing h when outputing a rule     */
 #define STAY            FALSE  /* if not advancing h when outputing a rule */
@@ -125,17 +116,7 @@
 bool        pageswitchon;       /* true if user-set pages to print           */
 bool        sequenceon;         /* false if pagesw-nrs refers to TeX-nrs     */
 bool        scascii;            /* if true make Scand. nat. chars right      */
-bool        accent;             /* if true output accents etc: \'{e} etc.    */
-bool        ttfont = FALSE;     /* if true we assumed ttfonts, not cmr       */
-bool        symbolfont = FALSE; /* true if font is a symbol font             */
-bool        japan = FALSE;      /* switch to japanese fonts ...              */
-bool        mifont = FALSE;
-int         jfontnum = 0;
 bool        noffd;              /* if true output ^L instead of formfeed     */
-char *      delim;              /* -bdelim for font switch printing          */
-bool        printfont;          /* true if user wants font switches printed  */
-bool        allchar;            /* true if user sets all characters          */
-                                /* overrides sscasci, accent                 */
 
 int         opcode;             /* dvi-opcodes                               */
 
@@ -149,8 +130,6 @@
 
 long        maxpagewidth;       /* width of widest page in file              */
 long        charwidth;          /* aprox width of character                  */
-long        lineheight = VERTICALEPSILON;
-                                /* aprox height of a line                    */
 
 linetype *  currentline;        /* pointer to current line on current page   */
 linetype *  firstline;          /* pointer to first line on current page     */
@@ -161,6 +140,7 @@
 int         sptr;               /* stack pointer                             */
 
 font * fonts = NULL;            /* List of fontnames defined                 */
+int  symbolfont = FALSE;        /* true if font is a symbol font             */
 
 
 
@@ -168,7 +148,7 @@
  * Function definitions
  */
 
-#if defined(MSDOS)
+#if defined(KPATHSEA) || defined(MSDOS)
 void            postamble       (void);
 void            preamble        (void);
 void            walkpages       (void);
@@ -193,38 +173,31 @@
 void            setchar         (long);
 void            fontdef         (int);
 void            setfont         (long);
-void            jischar         (long);
-int             compute_jis     (int, int, int *, int *);
-int             getjsubfont     (char *);
-
 #else
-void            postamble       (void);
-void            preamble        (void);
-void            walkpages       (void);
-void            initpage        (void);
-void            dopage          (void);
-void            skippage        (void);
-void            printpage       (void);
-bool            inlist          (long pagenr);
-void            rule            (bool moving, long rulewt, long ruleht);
-void            ruleaux         (long rulewt, long ruleht, char ch);
-long            horizontalmove  (long amount);
-int             skipnops        (void);
-linetype    *   texlive_getline (void);
-linetype    *   findline        (void);
-unsigned long   num             (int size);
-long            snum            (int size);
-void            dochar          (char ch);
-void            symchar         (char ch);
-void            normchar        (char ch);
-void            outchar         (unsigned char ch);
-void            putcharacter    (long charnr);
-void            setchar         (long charnr);
-void            fontdef         (int x);
-void            setfont         (long fntnum);
-void            jischar         (long charnr);
-void            compute_jis     (int f, int c, int * ku, int * ten);
-int             getjsubfont     (char * s);
+void            postamble       ();
+void            preamble        ();
+void            walkpages       ();
+void            initpage        ();
+void            dopage          ();
+void            skippage        ();
+void            printpage       ();
+bool            inlist          ();
+void            rule            ();
+void            ruleaux         ();
+long            horizontalmove  ();
+int             skipnops        ();
+linetype    *   texlive_getline ();
+linetype    *   findline        ();
+unsigned long   num             ();
+long            snum            ();
+void            dochar          ();
+void            symchar         ();
+void            normchar        ();
+void            outchar         ();
+void            putcharacter    ();
+void            setchar         ();
+void            fontdef         ();
+void            setfont         ();
 #if defined(VMS)
 long		vmsseek		();
 long		vms_ftell	();
@@ -249,8 +222,8 @@
     /* note that walkpages *must* immediately follow preamble */
     walkpages();                            /* time to do the actual work!    */
 
-    return;
-
+-    return;
+-
 } /* dvimain */
 
 
@@ -340,26 +313,30 @@
 
     pagecounter = 0L;
     while ((opcode = skipnops()) != POST) {
-
         if (opcode != BOP)              /* should be at start of page now    */
             errorexit(nobop);
+        else {
+            pagecounter++;
+            pagenr = sget4();           /* get TeX page number               */
+            mseek(DVIfile, 36L, relative); /* skip page header */
+            backpointer = sget4();      /* get previous page offset          */
+            if (pageswitchon)
+                if (sequenceon)
+                    wantpage = inlist(pagecounter);
+                else
+                    wantpage = inlist(pagenr);
+            else
+                wantpage = TRUE;
 
-        pagecounter++;
-        pagenr = sget4();               /* get TeX page number               */
-        mseek(DVIfile, 36L, relative);  /* skip page header */
-        backpointer = sget4();          /* get previous page offset          */
-        if (pageswitchon)
-            wantpage = inlist(sequenceon ? pagecounter : pagenr);
-        else
-            wantpage = TRUE;
-
-        if (wantpage) {
-            initpage();
-            dopage();
-            printpage();
-        }
-        else
+            if (wantpage) {
+                initpage();
+                dopage();
+                printpage();
+            }
+            else {
                 skippage();
+            }
+        }
     }
 
     return;
@@ -417,12 +394,12 @@
         if (opcode <= LASTCHAR)
             dochar((char) opcode);
         else if ((opcode >= FONT_00) && (opcode <= FONT_63)) 
-            setfont((long) opcode - FONT_00);
+            setfont(opcode - FONT_00);
         else if (opcode > POST_POST)
             errorexit(illop);
         else
             switch (opcode) {
-                case SET1     : japan ? jischar(get1()) : setchar(get1());break;
+                case SET1     : setchar(get1()); break;
                 case SET2     : setchar(get2()); break;
                 case SET3     : setchar(get3()); break;
                 case SET4     : setchar(get4()); break;
@@ -599,9 +576,9 @@
     for (currentline = firstline; currentline != nil;
           currentline = currentline->next) {
         if (currentline != firstline) {
-            foo = ((currentline->vv - currentline->prev->vv)/lineheight)-1;
+            foo = ((currentline->vv - currentline->prev->vv)/VERTICALEPSILON)-1;
             if (foo > 3)
-                foo = 3;         /* linespacings not too large */
+                foo = 3;        /* linespacings not too large */
             for (i = 1; i <= (int) foo; i++)
                 putc('\n', output);
         }
@@ -610,7 +587,7 @@
             for (i = firstcolumn, j = 1; i <= currentline->charactercount;
                    i++, j++) {
                 ch = currentline->text[i - leftmargin];
-                if (ch >= SPACE || allchar)
+                if (ch >= SPACE)
                     putc(ch, output);
                 if ((j > (int) foo) && (currentline->charactercount > i+1)) {
                         fprintf(output, "*\n");         /* if line to large */
@@ -681,7 +658,7 @@
         savev = v;
         if ((ruleht / rulewt) > 0)         /* value < 1 truncates to 0 */
             ch = '|';
-        else if (ruleht > (lineheight / 2))
+        else if (ruleht > (VERTICALEPSILON / 2))
             ch = '=';
         else
             ch = '_';
@@ -716,11 +693,11 @@
         outchar(ch);
         wt -= (h-rmh);              /* decrease the width left on line       */
     }
-    ruleht -= lineheight;      /* decrease the height                   */
-    if (ruleht > lineheight) { /* still more vertical?                  */
+    ruleht -= VERTICALEPSILON;      /* decrease the height                   */
+    if (ruleht > VERTICALEPSILON) { /* still more vertical?                  */
         rmh = h;                    /* save current h (right margin)         */
         h = lmh;                    /* restore left margin                   */
-        v -= (lineheight + lineheight / 10);
+        v -= (VERTICALEPSILON + VERTICALEPSILON / 10);
         ruleaux(rulewt, ruleht, ch);
         h = rmh;                    /* restore right margin                  */
     }
@@ -813,7 +790,7 @@
     register long topd, botd;
 
     if (v <= firstline->vv) {                      /* above first line */
-        if (firstline->vv - v > lineheight) {
+        if (firstline->vv - v > VERTICALEPSILON) {
             temp = texlive_getline();
             temp->next = firstline;
             firstline->prev = temp;
@@ -824,7 +801,7 @@
     }
 
     if (v >= lastline->vv) {                       /* below last line */
-        if (v - lastline->vv > lineheight) {
+        if (v - lastline->vv > VERTICALEPSILON) {
             temp = texlive_getline();
             temp->prev = lastline;
             lastline->next = temp;
@@ -841,7 +818,7 @@
     /* temp->vv < v < temp->next->vv --- temp is above, temp->next is below */
     topd = v - temp->vv;
     botd = temp->next->vv - v;
-    if ((topd < lineheight) || (botd < lineheight)) {
+    if ((topd < VERTICALEPSILON) || (botd < VERTICALEPSILON)) {
         if (topd < botd)                           /* take best fit */
             return temp;
         else
@@ -886,7 +863,7 @@
 long snum(int size)
 {
     register int i;
-    register long x;
+    register long x = 0;
 
     x = getc(DVIfile);
     if (x & 0x80)
@@ -906,10 +883,8 @@
 
 void dochar(char ch)
 {
- 
-    if (japan && jfontnum)
-        jischar((long) ch);
-    else if (symbolfont == TRUE)
+
+    if (symbolfont == TRUE)
         symchar(ch);
     else
         normchar(ch);
@@ -936,8 +911,6 @@
        case  14: ch = 'O'; break;
        case  15: ch = 'o'; break;
        case  24: ch = '~'; break;
-       case  32: ch = japan ? '<' : 32; break; /* really only for japan? */
-       case  33: ch = japan ? '>' : 33; break; /* really only for japan? */
        case 102: ch = '{'; break;
        case 103: ch = '}'; break;
        case 104: ch = '<'; break;
@@ -962,104 +935,58 @@
 {
 
     switch (ch) {
-        case 11  :  if (ttfont) 
-                        ch = '^';                   /* up symbol       */
-                    else if (!allchar) {
-                        outchar('f'); ch = 'f';     /* ligature        */
-                    }
-                    break;
-        case 12  :  if (ttfont) 
-                        ch = 'v';                   /* low symbol       */
-                    else if (!allchar) {
-                        outchar('f'); ch = 'i';     /* ligature        */
-                    }
+        case 11  :  outchar('f'); ch = 'f'; break;  /* ligature        */
+        case 12  :  outchar('f'); ch = 'i'; break;  /* ligature        */
+        case 13  :  outchar('f'); ch = 'l'; break;  /* ligature        */
+        case 14  :  outchar('f'); outchar('f');
+                                  ch = 'i'; break;  /* ligature        */
+        case 15  :  outchar('f'); outchar('f');
+                                  ch = 'l'; break;  /* ligature        */
+        case 16  :  ch = 'i'; break;
+        case 17  :  ch = 'j'; break;
+        case 25  :  if (scascii)                    /* German sz ligature */
+                        ch = 0xdf;
+                    else
+                        {outchar('s'); ch = 's';}
                     break;
-        case 13  :  if (ttfont) 
-                        ch = '`';
-                    else if (!allchar) {
-                        outchar('f'); ch = 'l';     /* ligature        */
-                    }
-                    break;
-        case 14  :  if (ttfont) 
-                        ch = 'i';                   /* spanish !        */
-                    else if (!allchar) {
-                        outchar('f'); outchar('f');
-                                  ch = 'i';         /* ligature        */
-                    }
+        case 26  :  if (scascii)                    /* Dane/Norw ae    */
+                        ch = 0xe6;
+                    else
+                        {outchar('a'); ch = 'e';}
                     break;
-        case 15  :  if (ttfont) 
-                        ch = '.';                   /* spanish ?        */
-                    else if (!allchar) {
-                        outchar('f'); outchar('f');
-                                  ch = 'l';         /* ligature        */
-                    }
+        case 27  :  outchar('o'); ch = 'e'; break;  /* Dane/Norw oe    */
+        case 28  :  if (scascii)                    /* Dane/Norw /o    */
+                        ch = 0xf8;
+                    else
+                        ch = 'o';
                     break;
-        case 16  :  if (!allchar) ch = 'i'; break;
-        case 17  :  if (!allchar) ch = 'j'; break;
-        case 25  :  if (!allchar) {
-                        outchar('s');
-                        ch = 's';
-                    }
-                    break;  /* German double s */
-        case 26  :  if (!allchar) {
-                        outchar('a');
-                        ch = 'e';
-                    }
-                    break;  /* Dane/Norw ae    */
-        case 27  :  if (!allchar) {
-                        outchar('o');
-                        ch = 'e';
-                    }
-                    break;  /* Dane/Norw oe    */
-        case 28  :  if (!allchar) {
-                        if (scascii)
-                            ch = '|';                   /* Dane/Norw /o    */
-                        else
-                            ch = 'o';
-                    }
+        case 29  :  if (scascii)                    /* Dane/Norw AE    */
+                        ch = 0xc6;
+                    else
+                        {outchar('A'); ch = 'E';}
                     break;
-        case 29  :  if (!allchar) {
-                        outchar('A');
-                        ch = 'E';
-                    }
-                    break;  /* Dane/Norw AE    */
-        case 30  :  if (!allchar) {
-                        outchar('O');
-                        ch = 'E';
-                    }
-                    break;  /* Dane/Norw OE    */
-        case 31  :  if (!allchar) {
-                        if (scascii)
-                            ch = '\\';                  /* Dane/Norw /O    */
-                        else
-                            ch = 'O';
-                    }
+        case 30  :  outchar('O'); ch = 'E'; break;  /* Dane/Norw OE    */
+        case 31  :  if (scascii)
+                        ch = 0xd8;                  /* Dane/Norw /O    */
+                    else
+                        ch = 'O';
                     break;
-        case 32  :  ch = allchar || ttfont ? ch : '_'; break;
-                                                        /* underlined blank */
-        case 58  :  ch = allchar || !mifont ? ch : '.'; break; /* if japan */
-        case 59  :  ch = allchar || !mifont ? ch : ','; break; /* if japan */
-        case 92  :  ch = allchar || ttfont ? ch : '"'; break;  /* \ from `` */
-        case 123 :  ch = allchar || ttfont ? ch : '-'; break;  /* { from -- */
-        case 124 :  ch = allchar || ttfont ? ch : '_'; break;  /* | from --- */
-        case 125 :  ch = allchar || ttfont ? ch : '"'; break;  /* } from \H */
-        case 126 :  ch = allchar || ttfont ? ch : '"'; break;  /* ~ from \~ */
-        case 127 :  if (!allchar) ch = '"'; break;             /* DEL from \" */
-       
-        /*
-         * Or should I use SPACE for non-accents ???
-         * This seems to work ...
-         */
-        case 18  :  ch = !allchar && accent ? '`' : ch; break;  /* from \` */
-        case 19  :  ch = !allchar && accent ? 0x27 : ch; break; /* from \' */
-        case 20  :  ch = !allchar && accent ? '~' : ch; break;  /* from \v */
-        case 21  :  ch = !allchar && accent ? '~' : ch; break;  /* from \u */
-        case 22  :  ch = !allchar && accent ? '~' : ch; break;  /* from \= */
-        case 24  :  ch = !allchar && accent ? ',' : ch; break;  /* from \c */
-        case 94  :  ch = (!allchar && accent && !ttfont) ? '^' : ch; break;
-                                                                /* ^ from \^ */
-        case 95  :  ch = (!allchar && accent && !ttfont) ? '`' : ch; break;
-                                                                /* _ from \. */
+        case 92  :  ch = '"'; break;  /* \ from `` */
+        case 123 :  ch = '-'; break;  /* { from -- */
+        case 124 :  ch = '_'; break;  /* | from --- */
+        case 125 :  ch = '"'; break;  /* } from \H */
+        case 126 :  ch = '"'; break;  /* ~ from \~ */
+        case 127 :  ch = '"'; break;  /* DEL from \" */
+#if 0
+        case 18  :  ch = '`'; break   /* from \` */
+        case 19  :  ch = ''''; break  /* from \' */
+        case 20  :  ch = '~'; break   /* from \v */
+        case 21  :  ch = '~'; break   /* from \u */
+        case 22  :  ch = '~'; break   /* from \= */
+        case 24  :  ch = ','; break   /* from \c */
+        case 94  :  ch = '^'; break   /* ^ from \^ */
+        case 95  :  ch = '`'; break   /* _ from \. */
+#endif
     }
     outchar(ch); 
 
@@ -1080,12 +1007,10 @@
 {
     register int i, j;
 
-/*     fprintf(stderr, "hor: %ld, ver: %ld\n", h, v); */
-
-#if defined(MSDOS) || defined(THINK_C)
-    if (labs(v - currentline->vv) > lineheight / 2L)
+#if defined(MSDOS)
+    if (labs(v - currentline->vv) > VERTICALEPSILON / 2L)
 #else
-    if (abs(v - currentline->vv) > lineheight / 2L)
+    if (abs(v - currentline->vv) > VERTICALEPSILON / 2L)
 #endif
         currentline = findline();
 
@@ -1119,15 +1044,14 @@
             for (i = IMAX(leftmargin, j-2);
                  i <= IMIN(rightmargin, j+2);
                  i++)
-                if ((currentline->text[i - leftmargin] == 127) || /* DEL */
-                    (currentline->text[i - leftmargin] == 34)  || /* "   */
+                if ((currentline->text[i - leftmargin] == 127) ||
+                    (currentline->text[i - leftmargin] == 34) ||
                     (currentline->text[i - leftmargin] == 23))
                     foo = i;
             if (foo >= leftmargin) {
                 j = (int) foo;
                 switch (currentline->text[j - leftmargin]) {
-                    case 127 :
-                    case 34  :                         /* DEL or " */
+                    case 127 : case 34:
                                if (ch == 'a')
                                    ch = 0xe4;
                                else if (ch == 'A')      /* dots ... */
@@ -1151,16 +1075,15 @@
         }
     }
     /*----------------- end of 'Scandinavian code' ----------------*/
-
     if (foo == leftmargin-1)
         while ((currentline->text[j - leftmargin] != SPACE)
                && (j < rightmargin)) {
             j++;
             h += charwidth;
         }
-    if ( allchar || ((ch >= SPACE) && (ch != DEL)) ||
+    if ( ((ch >= SPACE) && (ch != DEL)) ||
          (scascii && (ch == 23)) ) {
-          /*  (scascii && (ch == DEL)) )     if VMS ??? */
+          /*  (scascii && (ch == DEL)) ) {    if VMS ??? */
         if (j < rightmargin)
             currentline->text[j - leftmargin] = ch;
         else
@@ -1187,9 +1110,7 @@
     register long saveh;
 
     saveh = h;
-    if (japan)
-        dochar((char) charnr);
-    else if (allchar || ((charnr >= 0) && (charnr <= LASTCHAR)))
+    if ((charnr >= 0) && (charnr <= LASTCHAR))
         outchar((char) charnr);
     else
         setchar(charnr);
@@ -1210,7 +1131,7 @@
 void setchar(long charnr)
 {
 
-    outchar(allchar ? (unsigned char)charnr : '#');
+    outchar((unsigned char)(charnr));
 
     return;
 
@@ -1280,147 +1201,29 @@
 {
     font * fnt;
     char * s;
-    char * d;
 
     fnt = fonts;
     while (fnt != NULL && fnt->num != fntnum)
         fnt = fnt->next;
-    symbolfont = FALSE;
-    ttfont = FALSE;
-    mifont = FALSE;
-    jfontnum = 0;
     if (fnt == NULL) {
         /* error : font not found */
+        symbolfont = FALSE;
         return;
     }
 
     s = fnt->name;
-    d = delim;      /* print delim and font name if -b was chosen */
-    if (printfont) {
-         while (*d !=0) {putcharacter(*d); d++;}
-         d = s;
-         while (*d !=0) {putcharacter(*d); d++;}
-         /* d = strrev(delim); */
-         while (*d !=0) {putcharacter(*d); d++;}
-    }                                      
-
-    if (japan)
-        jfontnum = getjsubfont(s);
-    if (jfontnum == 0) {
-        while ((s = strchr(s, 's')) != NULL) {
-            if (strncmp("sy", s, 2) == 0) {
-                symbolfont = TRUE;
-                break;
-            }
-	    s++;      /* New line to fix bug; font names with 's' would hang */
-        }
-   
-        s = fnt->name;
-        while ((s = strchr(s, 't')) != NULL) {
-            if (strncmp("tt", s, 2) == 0) {
-                ttfont = TRUE;
-                break;
-            }
-	    s++;      /* New line to fix bug; font names with 's' would hang */
-        }
-   
-        s = fnt->name;
-        while ((s = strchr(s, 'm')) != NULL) {
-            if (strncmp("mi", s, 2) == 0) {
-                mifont = TRUE;
-                break;
-            }
-	    s++;      /* New line to fix bug; font names with 's' would hang */
+    while ((s = strchr(s, 's')) != NULL) {
+        if (strncmp("sy", s, 2) == 0) {
+            symbolfont = TRUE;
+            return;
         }
+	s++;	/* New line to fix bug; font names with 's' would hang */
     }
    
-
+    symbolfont = FALSE;
     return;
 
 } /* setfont */
-
-
-
-void jischar(long charnr)
-{
-    int Ku, Ten;
-
-    compute_jis(jfontnum, (int) charnr, &Ku, &Ten);
-    outchar(Ku+128);
-    outchar(Ten+128);
-
-    return;
-
-} /* jischar */
-  
-#define	kushift(c)	c+0x20
-#define	tenshift(c)	c+0x20
-
-void compute_jis(int f, int c, int *ku, int *ten)
-{
-    int n;
-
-    if (f <= 7) {
-        if (f == 1) {
-            if (c >= 100) {
-                *ku = kushift(2);
-                *ten = tenshift(c-100);
-            }
-            else {
-                *ku = kushift(1);
-                *ten = tenshift(c);
-            }
-        }
-        else if (f == 2) {
-            *ku = kushift(3);
-            *ten = tenshift(c-32);
-        }
-        else {
-            *ku = kushift(f+1);
-            *ten = tenshift(c);
-        }
-    }
-    else if (f <= 19) {    /* Daiichi Suijun */
-        n = (f-8)*256+c;
-        *ku = kushift((n/94)+16);
-        *ten = tenshift((n%94)+1);
-    }
-    else {            /* Daini Suijun */
-        n = (f-20)*256+c;
-        *ku = kushift((n/94)+48);
-        *ten = tenshift((n%94)+1);
-    }
-
-    return;
-
-} /* compute_jis */
-
-
-#define    NJSUBS        33
-char *jsf_names[]={
-    "jsy", "jroma", "jhira", "jkata", "jgreek", "jrussian", "jkeisen",
-    "jka", "jkb", "jkc", "jkd", "jke", "jkf", "jkg", "jkh", "jki", "jkj",
-    "jkk", "jkl", "jkm", "jkn", "jko", "jkp", "jkq", "jkr", "jks", "jkt",
-    "jku", "jkv", "jkw", "jkx", "jky", "jkz"
-};
-
-
-int getjsubfont(char *s)
-{
-    int jf;
-
-    if (s[0] == 'd' && (s[1] == 'm' || s[1] == 'g')) {
-        for (jf = 0; jf < NJSUBS; jf++) {
-            if (strncmp(&s[2], jsf_names[jf], strlen(jsf_names[jf])) == 0) 
-                return jf+1;
-        }
-        return 0;
-    }
-    else
-      return 0;
-
-} /* getjsubfont */
-
    
 
 
@@ -1429,10 +1232,7 @@
  */
 
 #if defined(VMS)
-long vmsseek(fp,n,dir)
-FILE *fp;
-long n;
-long dir;
+long vmsseek(FILE *fp, long n, long dir)
 {
     long k,m,pos,val,oldpos;
     struct stat buffer;
@@ -1484,8 +1284,7 @@
         
 
 
-long vms_ftell(fp)
-FILE *fp;
+long vms_ftell(FILE *fp)
 {
     char c;
     long pos;
@@ -1507,9 +1306,7 @@
 
 
 
-long vms_ungetc(c,fp)
-char c;
-FILE *fp;
+long vms_ungetc(char c, FILE *fp)
 {
 
     if ((c == EOF) && feof(fp))
