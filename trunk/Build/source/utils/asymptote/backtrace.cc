/***** Autogenerated from backtrace.in; changes will be overwritten *****/

#line 1 "runtimebase.in"
/*****
 * runtimebase.in
 * Andy Hammerlindl  2009/07/28
 *
 * Common declarations needed for all code-generating .in files.
 *
 *****/


#line 1 "backtrace.in"
/*****
 * backtrace.in
 * Andy Hammerlindl  2009/07/28
 *
 * Runtime functions for printing garbage collector backtraces.
 *
 *****/

#line 1 "runtimebase.in"
#include "stack.h"
#include "types.h"
#include "builtin.h"
#include "entry.h"
#include "errormsg.h"

using vm::stack;
using vm::error;
using types::formal;

#define PRIMITIVE(name,Name,asyName) using types::prim##Name;
#include <primitives.h>
#undef PRIMITIVE

void unused(void *);

#line 11 "backtrace.in"
// No extra code for .cc file.


namespace run {
#line 13 "backtrace.in"
// void generate_random_backtrace();
void gen_backtrace0(stack *)
{
#line 14 "backtrace.in"
#if defined(USEGC) && defined(GC_DEBUG) && defined(GC_BACKTRACE)
  GC_generate_random_backtrace();
#else
  error("generate_random_backtrace() requires ./configure --enable-gc-debug");
#endif
}

#line 22 "backtrace.in"
// void print_random_addresses(Int n=1);
void gen_backtrace1(stack *Stack)
{
  Int n=vm::pop<Int>(Stack,1);
#line 23 "backtrace.in"
#if defined(USEGC) && defined(GC_DEBUG) && defined(GC_BACKTRACE)
  GC_gcollect();
  for (Int i=0; i < n; ++i)
    GC_debug_print_heap_obj_proc(GC_base(GC_generate_random_valid_address()));
#else
  error("print_random_addresses() requires ./configure --enable-gc-debug");
  unused(&n); // Avoid unused variable warning message.
#endif
}

} // namespace run

namespace trans {

void gen_backtrace_venv(venv &ve)
{
#line 13 "backtrace.in"
  addFunc(ve, run::gen_backtrace0, primVoid(), "generate_random_backtrace");
#line 22 "backtrace.in"
  addFunc(ve, run::gen_backtrace1, primVoid(), "print_random_addresses", formal(primInt(), "n", true, false));
}

} // namespace trans
